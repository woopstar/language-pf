fileTypes: [
  "pf\.conf","pf"
]
name: "PF Packet Filtering"
scopeName: "source.pfconf"
patterns: [
  {
    'include': '#comment-block'
  }
  {
    'include': '#comment-line'
  }
  {
    'include': '#command-keyword'
  }
  {
    'include': '#description'
  }
  {
    'include': '#double-quoted'
  }
  {
    'include': '#single-quoted'
  }
  {
    comment: "ipv4-address"
    match: '\\b((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))([/]\\d{1,2})?\\b'
    name: "constant.numeric.pfconf"
  }
  {
    comment: "ipv6-address"
    match: '(?:\\s+|^)((?=.*::)(?!.*::.+::)(::)?([\\dA-Fa-f]{1,4}:(:|\\b)|){5}|([\\dA-Fa-f]{1,4}:){6})((([\\dA-Fa-f]{1,4}(::|:\\b|[/]\\d+|))|(?!\\3\\4)){2}|(((2[0-4]|1\\d|[1-9])?\\d|25[0-5])\\.?){4})([/]\\d{1,3})?(?:\\s|;)'
    name: "constant.numeric.pfconf"
  }
  {
    comment: "mac-address"
    match: '(?:(\\b))([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})([/]\\d{1,2})?\\b'
    name: "constant.numeric.pfconf"
  }
  {
    comment: "Netmasks"
    match: '\/\\d\{1,3}'
    name: "constant.numeric.pfconf"
  }
  {
    comment: "Tables"
    match: '<\\s*[a-zA-Z0-9_:][a-zA-Z0-9_:.-]*\\s*>'
    name: "variable.pfconf"
  }
  {
    comment: "Curly Braces"
    match: '[{|}]'
    name: "keyword.operator.pfconf"
  }
  {
    comment: "Variables"
    match: "\\$[a-zA-Z][a-zA-Z0-9_]+"
    name: "variable.pfconf"
  }
  {
    comment: "keywords tag"
    match: "\\b(tagged|tag)\\b"
    name: "string.pfconf"
  }
  {
    comment: "keywords atom"
    match: "\\b(all|any|yes|no|drop|return|reject)\\b"
    name: "invalid.illegal.pfconf"
  }
  {
    comment: "keywords builtin"
    match: "\\b(proto|inet6|inet|tcp|udp|icmp6|icmp|port|other|carp|pfsync|first|opening|closing|single|finwait|established|closed|multiple|error|states|frags|interval|frag)\\b"
    name: "markup.list.pfconf"
  }
  {
    comment: "keywords def"
    match: "\\b(label|user|file|timeout|limit|optimization|block-policy|loginterface|require-order|skip|synproxy|state|parent|bandwidth|static-port)\\b"
    name: "entity.name.pfconf"
  }
  {
    comment: "keywords main"
    match: "\\b(altq|anchor|antispoof|binat|pass|rtable|quick|block|queue|match|scrub|table|set|in|on|out|rdr-to|divert-to|route-to|reply-to|nat-to|nat|rdr)\\b"
    name: "keyword.control.pfconf"
  }
  {
    comment: "keywords attribute"
    match: "\\b(log)\\b"
    name: "storage.pfconf"
  }
  {
    comment: "Interfaces"
    match: '\\b((((ge|et|so|fe|gr|xe|lt|vt|si|sp)(-\\d+\/\\d+\/\\d+))|(st|lo|me|vme|ae|reth|fxp|em|ens|eth)\\d{1,3}|irb|vlan|vme)(\\.\\d{1,5})?)\\b(?![-_<>])'
    name: "string.pfconf"
  }
]

'repository':
  'double-quoted':
    'patterns': [
      {
        'begin': '"'
        'beginCaptures':
          '0':
            'name': 'string.junos'
        'end': '"'
        'endCaptures':
          '0':
            'name': 'string.junos'
        'patterns': [
          {
            'name': 'string.junos'
            'match': '[-\\w_,\\$\\\\*\\#;\'<>:\\./\\[\\]\\@\\%\\^\\(\\)\\+\\`\\~\\=\\&\\{\\}\\?\\|\\!]+'
          }
        ]
        'comment': 'Double quoted string'
      }
    ]
  'single-quoted':
    'patterns': [
      {
        'begin': '\''
        'beginCaptures':
          '0':
            'name': 'string.junos'
        'end': '\''
        'endCaptures':
          '0':
            'name': 'string.junos'
        'patterns': [
          {
            'name': 'string.junos'
            'match': '[-\\w_,\\$\\\\*\\#;"<>:\\./\\[\\]\\@\\%\\^\\(\\)\\+\\`\\~\\=\\&\\{\\}\\?\\|\\!]+'
          }
        ]
        'comment': 'Single quoted string'
      }
    ]
  'description':
    'patterns': [
      {
        'match': '(?:\\sdescription )([-\\w_,\\$\\\\*\\#;<>:\\./\\[\\]\\@\\%\\^\\(\\)\\+\\`\\~\\=\\&\\{\\}\\?\\|\\!]+)'
        'captures':
          '1':
            'name': 'markup.inserted.junos'
        'comment': 'Description'
      }
    ]
  'comment-block':
    'patterns': [
      {
        'begin': '/\\*'
        'end': '(\\*/|\n)'
        'captures':
          '0':
            'name': 'comment.block.junos'
        'name': 'comment.block.junos'
        'comment': 'comments or annotations'
      }
    ]
  'comment-line':
    'patterns': [
      {
        'match': '(^|^\\s|\\s)(#).*$\n?'
        'name': 'comment.line.junos'
        'comment': 'line comment #'
      }
    ]
  'command-keyword':
    'patterns': [
      {
        'match': '(?<=^|\\s)(set|request|delete|edit|show|protect:?|inactive:|unprotect|deactivate|activate)(?= )'
        'name': 'keyword.control.junos'
        'comment': 'commands keywords'
      }
    ]
